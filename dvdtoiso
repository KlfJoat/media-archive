#!/bin/bash
#
# Requirements: dvdbackup

# Debugging
#set -x

# Check for this script's requirements & exit with error if they are not found.
my_needed_commands="dvdbackup mkisofs zenity eject"
missing_counter=0
for needed_command in $my_needed_commands; do
  if ! hash "$needed_command" >/dev/null 2>&1; then
    printf "Command not found in PATH: %s\n" "$needed_command" >&2
    ((missing_counter++))
  fi
done
if ((missing_counter > 0)); then
  printf "Minimum %d commands are missing in PATH, aborting\n" "$missing_counter" >&2
  exit 1
fi

# Set device as the passed parameter, or a sensible default
dvd_device=${1:-/dev/sr0}
shift

# Grab a sensible default title from the disc itself
title=`dvdbackup --info --input=$dvd_device 2>/dev/null | grep 'DVD-Video information of the DVD with title' | sed -e 's/.* title \"//' | sed -e 's/\"$//'`

# If empty title, create a lame one for our use
if [ "$title" = "" ] ; then
  title="DVD_VIDEO"
fi

# If existing directory, find an unused name for us to rip to, and set $title to that
i="0"
findTitle="$title"
while [ -d ./"$findTitle" ] ; do
  i=$[$i+1]
  findTitle="$title-$i"
done
title="$findTitle"

# Rip in the background with progress info and using block mode if an error is encountered
dvdbackup --mirror --progress --error=b --input=$dvd_device --name="$title" &

# Gather the DVD name (while ripping)
newtitle=$(zenity --entry --title="DVD Name" --text="Enter the name of the DVD:" --entry-text="$title")

# Wait for both the rip and the DVD name gathering to end
wait

# Eject DVD in the background now that we're done with it
eject $dvd_device &

# If user entered a new title (not empty), rename the directory and set title==newtitle
if [ "$title" != "" ] ; then
  if  [ "$title" != "$newtitle" ] ; then
    mv --no-clobber "$title" "$newtitle"
    title=$newtitle
  fi
fi

# Check for existing ISO and set $isoTitle as necessary
i="0"
isoTitle="$title.iso"
while [ -f "$isoTitle" ] ; do
  i=$[$i+1]
  isoTitle="$title-$i.iso"
done

# Recreate ISO
mkisofs -A "$title" -dvd-video -udf -quiet -output "$isoTitle" "$title"

# If error during mkisofs, complain and exit
if [ $? -ne 0 ] ; then
  curdir=$(pwd)
  echo "ERROR running mkisofs/genisoimage on $curdir/$title/ to make $curdir/$isoTitle" >&2
  zenity --error --text="ERROR running mkisofs/genisoimage on $curdir/$title/ to make $curdir/$isoTitle"
  exit $? 
fi

# Delete the working directory now that the ISO is done successfully
/bin/rm -rf ./"$title"

# Notify user that we're done (10sec)
notify-send --expire-time=10000 --icon=info "Done creating ISO for $title."
