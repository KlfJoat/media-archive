#!/bin/bash
#===================================================================================
#
#         FILE: digitize-dvd
#
#        USAGE: digitize-dvd 
#
#      SUMMARY: Script to digitize my DVD collection and manage the resulting file.
#  DESCRIPTION: This is a lot of glue and automation on top of my other actual 
#               ripping and transcoding functions.  It's been kind of fun designing
#               and figuring out how to do this.
#
#      PROJECT: Media Collection (media-archive)
#      OPTIONS: 
# REQUIREMENTS: dvdtoiso, mktemp, zenity, dvdbackup
# PACKAGES REQ: dvdbackup
#         BUGS: Probably dozens.
#        NOTES: TODO: Figure out if there's a way to determine Animated, TV, or
#               Movie in some automated fashion.  
#       AUTHOR: KlfJoat
#      VERSION: 0.3
#      CREATED: 2014-05-03
#     REVISION: 0.1: 2014-05-03
#               0.2: 2014-08-06
#               0.3: 2015-10-03
#===================================================================================
# Debug
set -x
################################
####### CHECK CONDITIONS #######
################################
### Check for necessary commands
my_needed_commands="find basename mktemp zenity"
missing_counter=0
for needed_command in $my_needed_commands; do
  if ! hash "$needed_command" >/dev/null 2>&1; then
    printf "Command not found in PATH: %s\n" "$needed_command" >&2
    ((missing_counter++))
  fi
done
if ((missing_counter > 0)); then
  printf "Minimum %d commands are missing in PATH, aborting\n" "$missing_counter" >&2
  exit 1
fi

### Check for enough HDD space.  43GB = 18GB + 25GB buffer
### Check if DVD is a movie or TV show

##############################
####### INITIALIZATION #######
##############################
### Variables
workingdir="$HOME/tmp"
holding_rip="$HOME/tmp/MoveToRipDrive"
holding_transcode="$HOME/tmp/MoveToTranscodeDrive"
dir_rip="DVD-Rip"
dir_transcode="DVD-Transcode"
titlemode=$(zenity --list --text "Choose DVD content" --radiolist --column "Pick" --column "Type" TRUE "Movies" FALSE "TV" FALSE "Animation")
# Set nas_rip directory to appropriate one, based on $titlemode.  TV and Animation get special subdirs.
if [[ $titlemode -eq "Movies" ]]; then
  nas_rip="$HOME/Videos/Rips"
else
  nas_rip="$HOME/Videos/Rips/$titlemode"
fi
nas_transcode="$HOME/Videos/$titlemode"

### Ensure directories are created for the working and NAS variables.
mkdir --parents "$workingdir"
mkdir --parents "$nas_rip"
mkdir --parents "$nas_transcode"
      
### Create temp dir
TMPDIR=$(mktemp --quiet --directory --tmpdir="$workingdir" dvd.XXXXXX) || { echo "Failed to create temp directory."; exit 1; }
olddir=$(pwd)
cd "$TMPDIR"

### Set up traps for program exit
function clean_up {
  # Perform program exit housekeeping
  cd "$olddir"	# Change back
  /bin/rm -rf "$TMPDIR"   # Delete rip, transcode, and interim files
    trap 0  # reset to default action
  exit
}

trap clean_up 0 1 2 3 15

###########################################
####### DUAL - RIP AND GET DVD INFO #######
###########################################
dvdtoiso

if [[ $? -ne 0 ]]; then
  # The helper script already printed out an error message.
  exit $?
fi


### Figure out ISO filename (should be the only one in our temp directory)
isofile=$(find *.iso)
if [[ ! -f $isofile ]]; then
  echo "The rip did not create an ISO file that could be discerned.  Exiting." >&2
  echo "The value of isofile is '$isofile'" >&2
  exit 1
fi

# Get filename minus dirs and minus ext (use for transcode filename)
basename=$(basename --suffix=.iso $isofile)
transcodefilename="$basename.mkv"


###########################################
#?????? ADD DISC TO TOC SPREADSHEET ???????
###########################################

#########################
####### TRANSCODE #######
#########################
#OUTPUTDIR="$TMPDIR" TITLEMODE="$titlemode" isotomkv "$isofile"  # Don't do this until copy to transcode dir works; this script will delete the TMPDIR when it ends. 
TITLEMODE="$titlemode" isotomkv "$isofile"  # Temporarily: Output to default location, $HOME/tmp

#if [[ $? -ne 0 ]]; then
#  # The helper script already printed out an error message.
#  exit $?
#fi

### Get the transcode filename(s) 
#==== Work below here.  Find some way to help the user name the files.  
#==== Extensive zenity usage?  Just text entry dialogs?  This seems to imply that lists can be editable!! https://help.gnome.org/users/zenity/stable/list.html.en
#transcodedir=$(find *.mkv -type f)
#if [[ ! -d $transcodedir ]]; then
#  echo "The second running of abcde did not create a transcode directory that could be found.  Exiting." >&2
#  echo "The value of transcodedir is '$transcodedir'" >&2
#  exit 1
#fi

###########################
####### COPY TO NAS #######
###########################

### Copy rip to NAS
cp --verbose --recursive "$isofile" "$nas_rip"
### Copy transcode to NAS
#cp --verbose --recursive "$transcodedir" "$nas_transcode"

###############################################
####### COPY TO EXT HDD OR HOLDING AREA #######
###############################################
# Variables - RegExps to use.
ripregexp="\/Rip"
#transcoderegexp="\/Transcode"

### First, make sure only one of each recognizable drive is attached.
### Then, set the drives' mount points. 
# Find 1 Rip drive
ripcount=$(grep --count "$ripregexp" /proc/mounts)
if [[ $ripcount -eq 1 ]]; then
  # The perl regex replaces 5 groups of non-spaces+spaces with nothing, 
  # leaving only the rest of line. Which is the mount point including any 
  # possible spaces.  "|awk '{print $6}'" would work, except for spaces.
  ripdrive=$(df -P | grep $ripregexp | perl -pe 's/^(\S+\s+){5}//')
fi

# Find 1 Transcode drive
#transcodecount=$(grep --count "$transcoderegexp" /proc/mounts)
#if [[ $transcodecount -eq 1 ]]; then
#  # The perl regex replaces 5 groups of non-spaces+spaces with nothing, 
#  # leaving only the rest of line. Which is the mount point including any 
#  # possible spaces.  "|awk '{print $6}'" would work, except for spaces.
#  transcodedrive=$(df -P | grep $transcoderegexp | perl -pe 's/^(\S+\s+){5}//')
#fi

### ??Check for filename collision??

### Copy rip to ext HDD, if mounted; holding dir if not.
if [[ "$ripdrive" ]]; then
  dest="${ripdrive}/${dir_rip}"
else
  dest="${holding_rip}/${dir_rip}"
fi

mkdir --parents "$dest"
cp --verbose --recursive "$isofile" "$dest"

### Copy transcode to ext HDD, if mounted; holding dir if not.
#if [[ "$transcodedrive" ]]; then
#  dest="${transcodedrive}/${dir_transcode}"
#else
#  dest="${holding_transcode}/${dir_transcode}"
#fi

#mkdir --parents "$dest"
#cp --verbose --recursive "$transcodedir" "$dest"

########################
####### CLEAN UP #######
########################
### Because of "trap 0", the function clean_up runs here.

# Pause so output can be reviewed before closng digitize-dvd window.
# TODO: Find a way to only execute this if digitize-dvd was called from a .desktop file. 
read -n1 -r -p "Press any key to close window..."